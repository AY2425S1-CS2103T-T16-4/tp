package seedu.address.logic.commands;

import static java.util.Objects.requireNonNull;
import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;
import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;
import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;
import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;
import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;
import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;
import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_GROUP;

import seedu.address.commons.util.ToStringBuilder;
import seedu.address.logic.Messages;
import seedu.address.logic.commands.exceptions.CommandException;
import seedu.address.model.Model;
import seedu.address.model.attendance.AttendanceManager;
import seedu.address.model.person.Person;

/**
 * Marks attendance for students in the application.
 */
public class MarkAttendanceCommand extends Command {

    public static final String COMMAND_WORD_MARK_PRESENT_ALL = "mark_present_all";
    public static final String COMMAND_WORD_UNMARK_PRESENT = "unmark_present";

    public static final String MESSAGE_USAGE = COMMAND_WORD_MARK_PRESENT_ALL + ": Marks all students present for a tutorial group on a given date. "
            + "Parameters: "
            + PREFIX_TUTORIAL_GROUP + "TUTORIAL_GROUP "
            + PREFIX_DATE + "DATE\n"
            + "Example: " + COMMAND_WORD_MARK_PRESENT_ALL + " "
            + PREFIX_TUTORIAL_GROUP + "T69 "
            + PREFIX_DATE + "09/11/2001\n"
            + "\n" + COMMAND_WORD_UNMARK_PRESENT + ": Unmarks a student as present for a tutorial group on a given date. "
            + "Parameters: "
            + PREFIX_NAME + "STUDENT_NAME "
            + PREFIX_TUTORIAL_GROUP + "TUTORIAL_GROUP "
            + PREFIX_DATE + "DATE\n"
            + "Example: " + COMMAND_WORD_UNMARK_PRESENT + " "
            + PREFIX_NAME + "Nathan Loo "
            + PREFIX_TUTORIAL_GROUP + "T69 "
            + PREFIX_DATE + "09/11/2001";

    public static final String MESSAGE_MARK_PRESENT_SUCCESS = "All students have been marked present on %1$s. :)";
    public static final String MESSAGE_UNMARK_PRESENT_SUCCESS = "%1$s has been absent for 2 lessons.";
    public static final String MESSAGE_INVALID_TUTORIAL_GROUP = "Invalid tutorial group format!";
    public static final String MESSAGE_INVALID_DATE = "Invalid date format!";

    private final String tutorialGroup;
    private final String date;
    private final String studentName; // Only used in unmark command

    /**
     * Creates a MarkAttendanceCommand to mark students present for a given tutorial group and date.
     */
    public MarkAttendanceCommand(String tutorialGroup, String date) {
        requireNonNull(tutorialGroup);
        requireNonNull(date);
        this.tutorialGroup = tutorialGroup;
        this.date = date;
        this.studentName = null; // Not used for mark present all
    }

    /**
     * Creates a MarkAttendanceCommand to unmark a specific student present.
     */
    public MarkAttendanceCommand(String studentName, String tutorialGroup, String date) {
        requireNonNull(studentName);
        requireNonNull(tutorialGroup);
        requireNonNull(date);
        this.studentName = studentName;
        this.tutorialGroup = tutorialGroup;
        this.date = date;
    }

    @Override
    public CommandResult execute(Model model) throws CommandException {
        requireNonNull(model);

        AttendanceManager attendanceManager = model.getAttendanceManager();

        if (studentName == null) {
            // Mark all present
            attendanceManager.markAllPresent(tutorialGroup, date);
            return new CommandResult(String.format(MESSAGE_MARK_PRESENT_SUCCESS, date));
        } else {
            // Unmark specific student
            attendanceManager.unmarkPresent(studentName, tutorialGroup, date);
            return new CommandResult(String.format(MESSAGE_UNMARK_PRESENT_SUCCESS, studentName));
        }
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        // instanceof handles nulls
        if (!(other instanceof MarkAttendanceCommand)) {
            return false;
        }

        MarkAttendanceCommand otherCommand = (MarkAttendanceCommand) other;
        return tutorialGroup.equals(otherCommand.tutorialGroup) &&
                date.equals(otherCommand.date) &&
                (studentName == null ? otherCommand.studentName == null : studentName.equals(otherCommand.studentName));
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this)
                .add("tutorialGroup", tutorialGroup)
                .add("date", date)
                .add("studentName", studentName)
                .toString();
    }
}
